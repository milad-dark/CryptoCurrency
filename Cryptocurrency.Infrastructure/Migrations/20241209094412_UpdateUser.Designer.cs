// <auto-generated />
using System;
using Cryptocurrency.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Cryptocurrency.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20241209094412_UpdateUser")]
    partial class UpdateUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.11");

            modelBuilder.Entity("Cryptocurrency.Domain.Models.CryptoSymbol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("CryptoSymbols");
                });

            modelBuilder.Entity("Cryptocurrency.Domain.Models.ExchangeRates", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CryptoSymbolId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CryptoSymbolId");

                    b.ToTable("ExchangeRates");
                });

            modelBuilder.Entity("Cryptocurrency.Domain.Models.SearchHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CryptoSymbolId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("SearchedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CryptoSymbolId");

                    b.ToTable("SearchHistories");
                });

            modelBuilder.Entity("Cryptocurrency.Domain.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Cryptocurrency.Domain.Models.ExchangeRates", b =>
                {
                    b.HasOne("Cryptocurrency.Domain.Models.CryptoSymbol", "CryptoSymbol")
                        .WithMany("ExchangeRates")
                        .HasForeignKey("CryptoSymbolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CryptoSymbol");
                });

            modelBuilder.Entity("Cryptocurrency.Domain.Models.SearchHistory", b =>
                {
                    b.HasOne("Cryptocurrency.Domain.Models.CryptoSymbol", "CryptoSymbol")
                        .WithMany()
                        .HasForeignKey("CryptoSymbolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CryptoSymbol");
                });

            modelBuilder.Entity("Cryptocurrency.Domain.Models.CryptoSymbol", b =>
                {
                    b.Navigation("ExchangeRates");
                });
#pragma warning restore 612, 618
        }
    }
}
